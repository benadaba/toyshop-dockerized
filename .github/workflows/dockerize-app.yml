#name
name: Dockerise web application

#when does it run
on:
  push:
    branches: [ "main", "my-other-branch" ] #run only when there is a push on the main branch
  pull_request:
    branches: [ "main" ]  #only when there is a pull  request for the main branch


#what jobs will it be running when it triggers
jobs:
  #which manchine is it going to run it on
  build-run-docker-image:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Check that it runs fine. 
      run: ls 

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME  }}
        password: ${{ secrets.DOCKER_PASSWORD  }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with: 
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME  }}/toyshop-dockerized:gha

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Create Security Group
      id: sg
      run: | 
        SG_ID=$(aws ec2 create-security-group --group-name MyGHASecGrp3 --description "SecurityGroup for github action"  --vpc-id vpc-b9b523d0 --query 'GroupId' --output text)
        aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0
        aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 22 --cidr 0.0.0.0/0
        echo "::set-output name=sg_id::$SG_ID"


    - name: Launch EC2 Instance
      id: ec2
      run: |
        INSTANCE_ID=$(aws ec2 run-instances --image-id ami-046d5130831576bbb --count 1 --instance-type t2.medium --key-name April2024key1 --security-group-ids ${{ steps.sg.outputs.sg_id }} --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=GitHubActionEC2-DockerBuild}]' --subnet-id subnet-c737ea8a --user-data file://user-data.txt --query 'Instances[0].InstanceId' --output text) 
        echo "::set-output name=instance_id::$INSTANCE_ID"  

    - name: wait for ec2 instance to be running
      run: |
        aws ec2 wait instance-running --instance-ids ${{ steps.ec2.outputs.instance_id  }}  

    - name: Get EC2 Public IP
      id: ip
      run: |
        PUBLIC_IP=$(aws ec2 describe-instances --instance-ids ${{ steps.ec2.outputs.instance_id }} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
        echo "::set-output name=public_ip::$PUBLIC_IP"

    - name: Print Public IP
      run: echo "Public IP address is -  ${{ steps.ip.outputs.public_ip }}"